#!/usr/bin/env bash
# vim: ts=4:sw=4:noet:ai

# Check for CA_ROOT variable
if [ -z "$CA_ROOT" ]
then
    echo "Please source the CA shell environment from the \"env.sh\" file."
    exit 1
fi

if [ ! -d "$CA_ROOT/backups" ]
then
    mkdir "$CA_ROOT/backups"
fi

PASSFILE="$CA_ROOT/backup-encryption-key.txt"

if [ ! -f "$PASSFILE" ]
then
    touch "$PASSFILE"
    chmod 0600 "$PASSFILE"
    openssl rand -base64 2048 >> "$PASSFILE"
fi

BACKUP_INDEX=1
FILENAME="$CA_SHORTNAME-$(date +%Y-%m-%d)-$(printf '%3.3d' $BACKUP_INDEX).gpg"
BACKUP_FILE="$CA_ROOT/backups/$FILENAME"

# Check if the file already exists.
# If yes, add an index to the filename and try again until the index reaches 1000.
while [ -f "$BACKUP_FILE" ]
do
    # shellcheck disable=SC2004
    BACKUP_INDEX=$(($BACKUP_INDEX + 1))
    if [ $BACKUP_INDEX -gt 1000 ]
    then
        echo "ERROR: Backup index reached the end of its allowed range."
        exit 1
    fi
    FILENAME="$CA_SHORTNAME-$(date +%Y-%m-%d)-$(printf '%3.3d' $BACKUP_INDEX).gpg"
    BACKUP_FILE="$CA_ROOT/backups/$FILENAME"
done

# Backup CA files excluding the backup directory itself and the encryption key.
# NOTE: Remember to backup the key in the same place.
if (cd "$CA_ROOT"; tar -c --exclude backups --exclude backup-encryption-key.txt . ) | gpg --symmetric --cipher-algo=AES256 --passphrase-file "$PASSFILE" --batch -o "$BACKUP_FILE"
then
    # Out the backup filename if successful.
    echo "$BACKUP_FILE"
else
    # Signal an error
    exit 1
fi
