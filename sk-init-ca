#!/usr/bin/env bash
# vim: ts=4:sw=4:noet:ai

# Check, if the root folder has been specified.
CA_ROOT=$1

# Check, if the path already exists.
if [ -e "$CA_ROOT" -a ! -d "$CA_ROOT" ]
then
    # There is a file at the path specified.
    echo "Usage: $0 {CA_ROOT}"
    exit 1
fi

shift
SUBCA="$1"

# Check if the path does not exist.
if [ ! -e "$CA_ROOT" ]
then
    # Create an empty directory
    mkdir -p "$CA_ROOT"
fi

# Convert CA_ROOT to absolute path.
CA_ROOT=$( cd $CA_ROOT; echo $(pwd))

# Check, if the selected folder contains the CA structure
for f in env.sh index.txt serial newcerts certs private configs requests
do
    if [ -e $f ];
    then
        echo "CA root folder: \"$CA_ROOT\" already contains CA structure."
        echo "Please choose an empty folder."
        exit 1
    fi
done

# Query information
echo -n "Enter a CA common name : "; read CN
echo -n "Enter short CA name (optional) : "; read CANAME
echo -n "Enter an organization name: "; read ORG
echo -n "Enter an organization unit name: "; read OU
echo -n "Enter a country code (e.g. PL): "; read CC
echo -n "Enter a locality (City name): "; read LOCALITY
echo -n "Enter a CRL and Root certificate publishing URL: "; read CACRLURL

if [ -z "$CANAME" ]; then
    # Use CN as CANAME.
    CANAME="$CN"
fi

if [ -z "$CN" ]; then
    echo "CA common name must be specified."
    exit 1
fi

if [ -z "$CACRLURL" ]; then
    echo "Publishing hostname must be specified."
    exit 1
fi

# Normalize the CANAME
CANAME=$(echo "$CANAME" | tr '[:upper:][:punct:][:blank:]' '[:lower:]__')

# Write shell environment setup file.
cat > "$CA_ROOT/env.sh" <<EOF
export CA_ROOT=$CA_ROOT
export CA_SHORTNAME=$CANAME
export CA_CONF=\$CA_ROOT/$CANAME.conf
export CA_CRT_YRS=10
export CA_SRV_YRS=2
export CA_CLI_YRS=1
export CA_CRL_LIFE=30
export CA_SCRIPTS=$( cd $(dirname $0); echo $(pwd))
export PATH=\$CA_SCRIPTS:\$PATH
EOF

# Source variable
. $CA_ROOT/env.sh

cat > $CA_CONF <<EOF
HOME = $CA_ROOT
RANDFILE = $CA_ROOT/.rnd

[ ca ]
default_ca = $CANAME

[ $CANAME ]
dir = $CA_ROOT
database = \$dir/index.txt
new_certs_dir = \$dir/newcerts

certificate = \$dir/certs/$CANAME.pem
serial = \$dir/serial
private_key = \$dir/private/$CANAME-key.pem
RANDFILE = \$dir/private/.rnd

default_days = 365
default_crl_days = 30

crl = \$dir/$CA_SHORTNAME.crl
crl_extensions = crl_ext

# Default
default_md = sha256
# For compatibility set to
# default_md = sha1

preserve = no

policy = policy_any

name_opt = ca_default
cert_opt = ca_default

copy_extensions = copy

[ policy_any ]
countryName = optional
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional
streetAddress = optional
localityName = optional
postalCode = optional
businessCategory = optional

[ req ]
distinguished_name = req_dn
prompt = no

[ v3_ca ]
basicConstraints = critical,CA:TRUE
subjectKeyIdentifier = hash
keyUsage=critical,digitalSignature,cRLSign,keyCertSign
authorityKeyIdentifier=keyid:always,issuer

[ v3_subca ]
basicConstraints=critical,CA:true,pathlen:0
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
keyUsage=critical,digitalSignature,cRLSign,keyCertSign
authorityInfoAccess = @v3_aia
crlDistributionPoints = @v3_crl

[ v3_server ]
basicConstraints = CA:FALSE
keyUsage = critical,keyEncipherment,digitalSignature
extendedKeyUsage = serverAuth,clientAuth
nsCertType = server,client
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
authorityInfoAccess = @v3_aia
crlDistributionPoints = @v3_crl

[ v3_client ]
basicConstraints = CA:FALSE
keyUsage = critical,keyEncipherment,digitalSignature
extendedKeyUsage = clientAuth,emailProtection,codeSigning
nsCertType = email,client,objsign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
authorityInfoAccess = @v3_aia
crlDistributionPoints = @v3_crl

[ v3_aia ]
caIssuers;URI=$CACRLURL/$CANAME.crt

[ v3_crl ]
URI=$CACRLURL/$CANAME.crl

[ crl_ext ]
authorityKeyIdentifier=keyid:always
issuerAltName=issuer:copy

[ req_dn ]
CN = $CN
EOF

if [ ! -z "$CC" ]; then
    echo "C = $CC" >> $CA_CONF
fi

if [ ! -z "$LOCALITY" ]; then
    echo "L = $LOCALITY" >> $CA_CONF
fi

if [ ! -z "$ORG" ]; then
    echo "O = $ORG" >> $CA_CONF
fi

if [ ! -z "$OU" ]; then
    echo "OU = $OU" >> $CA_CONF
fi

# Add a blank line
echo >> $CA_CONF

echo "The CA has been initialized. Please review the $CA_CONF file before proceeding."
echo "Source the environment variables using:"
echo
echo ". $CA_ROOT/env.sh"
echo
echo "and run 'sk-make-ca' script."
