#!/usr/bin/env bash
# vim: ts=4:sw=4:noet:ai

# Check, if the root folder has been specified.
CA_ROOT=$1

# Check, if the path already exists.
if [ -e "$CA_ROOT" -a ! -d "$CA_ROOT" ]
then
    # There is a file at the path specified.
    echo "Usage: $0 {CA_ROOT}"
    exit 1
fi

# Check if the path does not exist.
if [ ! -e "$CA_ROOT" ]
then
    # Create an empty directory
    mkdir -p "$CA_ROOT"
fi

# Convert CA_ROOT to absolute path.
CA_ROOT=$( cd $CA_ROOT; echo $(pwd))

# Check, if the selected folder contains the CA structure
for f in env.sh index.txt serial newcerts certs private ca.conf configs requests
do
    if [ -e $f ];
    then
        echo "CA root folder: \"$CA_ROOT\" already contains CA structure."
        echo "Please choose an empty folder."
        exit 1
    fi
done

# Query information
echo -n "Enter a CA common name : "; read CN
echo -n "Enter short CA name (optional) : "; read CANAME
echo -n "Enter an organization name: "; read ORG
echo -n "Enter an organization unit name: "; read OU
echo -n "Enter a country code (e.g. PL): "; read CC
echo -n "Enter a locality (City name): "; read LOCALITY
echo -n "Enter a CRL and Root certificate publishing URL: "; read CACRLURL

if [ -z "$CANAME" ]; then
    echo "CA common name must be specified."
    exit 1
fi

if [ -z "$CN" ]; then
    echo "CA common name must be specified."
    exit 1
fi

if [ -z "$CACRLURL" ]; then
    echo "Publishing hostname must be specified."
    exit 1
fi

CANAME_L=$(echo $CANAME | tr '[:upper:][:blank:]' '[:lower:]_')

# Write shell environment setup file.
cat > "$CA_ROOT/env.sh" <<EOF
export CA_ROOT=$CA_ROOT
export CA_SHORTNAME=$CANAME_L
export CA_CONF=\$CA_ROOT/ca.conf
export CA_CRT_YRS=10
export CA_SRV_YRS=2
export CA_CLI_YRS=1
export CA_CRL_LIFE=30
export CA_SCRIPTS=$( cd $(dirname $0); echo $(pwd))
export PATH=\$CA_SCRIPTS:\$PATH
EOF

# Source variable
source $CA_ROOT/env.sh

cat > $CA_CONF <<EOF
HOME = $CA_ROOT
RANDFILE = $CA_ROOT/.rnd

[ ca ]
default_ca = $CANAME

[ $CANAME ]
dir = $CA_ROOT
database = \$dir/index.txt
new_certs_dir = \$dir/newcerts

certificate = \$dir/certs/ca.pem
serial = \$dir/serial
private_key = \$dir/private/ca-key.pem
RANDFILE = \$dir/private/.rnd

default_days = 365
default_crl_days = 30
# Default
default_md = sha256
# For compatibility set to
# default_md = sha1

preserve = no

policy = policy_any

name_opt = ca_default
cert_opt = ca_default

copy_extensions = copy

[ policy_any ]
countryName = optional
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional
streetAddress = optional
localityName = optional
postalCode = optional
businessCategory = optional

[ req ]
distinguished_name = req_dn
prompt = no

[ v3_ca ]
basicConstraints = critical,CA:TRUE
subjectKeyIdentifier = hash
keyUsage = critical,keyCertSign,cRLSign

[ v3_server ]
basicConstraints = CA:FALSE
keyUsage = critical,keyEncipherment,digitalSignature
extendedKeyUsage = serverAuth,clientAuth
nsCertType = server,client
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
authorityInfoAccess = caIssuers;URI:$CACRLURL/$CANAME_L.crt
crlDistributionPoints = URI:$CACRLURL/$CANAME_L.crl

[ v3_client ]
basicConstraints = CA:FALSE
keyUsage = critical,keyEncipherment,digitalSignature
extendedKeyUsage = clientAuth,emailProtection,codeSigning
nsCertType = email,client,objsign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
authorityInfoAccess = caIssuers;URI:$CACRLURL/$CANAME_L.crt
crlDistributionPoints = URI:$CACRLURL/$CANAME_L.crl

[ req_dn ]
CN = $CN
EOF

if [ ! -z $CC ]; then
    echo "C = $CC" >> $CA_CONF
fi

if [ ! -z $LOCALITY ]; then
    echo "L = $LOCALITY" >> $CA_CONF
fi

if [ ! -z $ORG ]; then
    echo "O = $ORG" >> $CA_CONF
fi

if [ ! -z $OU ]; then
    echo "OU = $OU" >> $CA_CONF
fi

# Add a blank line
echo >> $CA_CONF

# Create a new index, serial and subdirectories.
touch "$CA_ROOT/index.txt"
echo 01 > "$CA_ROOT/serial"
mkdir -m 755 "$CA_ROOT/newcerts" "$CA_ROOT/certs" "$CA_ROOT/requests" "$CA_ROOT/configs" "$CA_ROOT/crl"
mkdir -m 750 "$CA_ROOT/private"

# Write .rnd file
openssl rand -writerand $CA_ROOT/.rnd

# Generate a key
openssl genrsa -out "$CA_ROOT/private/ca-key.pem" 4096

# Generate a request
openssl req -new -out "$CA_ROOT/ca.req" -key "$CA_ROOT/private/ca-key.pem" -config $CA_CONF

# Create a selfsigned certificate
openssl x509 -req -sha256 -days $(($CA_CRT_YRS * 365)) -in "$CA_ROOT/ca.req" -signkey "$CA_ROOT/private/ca-key.pem" -out "$CA_ROOT/certs/ca.pem" -extensions v3_ca -extfile $CA_CONF

# Remove request
rm -f "$CA_ROOT/ca.req"
